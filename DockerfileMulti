# La modalità standalone consente di creare una build più leggera e autonoma.
# Nel tuo next.config.ts assicurati di avere:
# const nextConfig: NextConfig = {
#  output: "standalone"
#};

# Note:
# - Il primo stadio (builder) costruisce il progetto (compilando Next.js).
# - Il secondo stadio (runtime) copia solo i file necessari per l'esecuzione dell'app (evitando di includere file inutili come quelli relativi allo sviluppo).
# Questo approccio riduce le dimensioni dell'immagine finale, poiché nel container di runtime vengono inclusi solo i file necessari per eseguire l'app.


# ============================
# STAGE 1: Build
# ============================
FROM node:18-alpine AS builder

# Imposta la directory di lavoro
WORKDIR /app

# Copia solo i file necessari per le dipendenze
COPY package.json package-lock.json ./

# Non usare il comando seguene:
# RUN npm ci --omit=dev
# Infatti, questo ignora tutte le devDependencies di cui "next build" necessita (come ad esempio @types, eslint, tailwind, babel, typescript, jest, ecc.)
#
# Installa invece anche le tutte le dipendenze di sviluppo (devDependencies)
RUN npm ci

# Copia il resto del progetto
COPY . .

# Costruisci il progetto in modalità standalone
RUN npm run build

# Copia la cartella public (asset statici)
# Implemento il comando seguente, come descritto nella guida https://nextjs.org/docs/app/api-reference/config/next-config-js/output
# cp -r public .next/standalone/ && cp -r .next/static .next/standalone/.next/
COPY public .next/standalone/public
RUN cp -r .next/static .next/standalone/.next/
# ...questi ultimi sono gli asset statici generati automaticamente dal processo di build (es: File JavaScript e CSS ottimizzati + Assets generati dal compilatore di Next.js)

# ============================
# STAGE 2: Runtime
# ============================
FROM node:18-alpine AS runner

# Imposta la variabile d’ambiente per la produzione
ENV NODE_ENV=production
ENV PORT=8080

# Imposta la directory di lavoro
WORKDIR /app
USER node

# Modalità standalone – Dopo next build
#
# .next/
# ├── standalone/
# │   ├── server.js            ✅ entrypoint dell’app
# │   ├── node_modules/        ✅ solo le dipendenze usate
# │   ├── ...
# │   ├── .next/static/
# │   ├── public/
# │   └── app/
# |    
# ├── static/                  ✅ assets pubblici

# Copia solo la build ottimizzata dal builder
COPY --chown=node:node --from=builder /app/.next/standalone ./
# /
# ├── standalone/
# │   ├── server.js
# │   ├── ...
# │   ├── .next/
# │   ├── public/
# │   └── app/

# COPY --chown=node:node --from=builder /app/.next/static ./.next/static
# COPY --chown=node:node --from=builder .next ./.next
# COPY --chown=node:node --from=builder public ./public
# COPY --chown=node:node --from=builder /app/next.config.js ./next.config.js
# COPY --chown=node:node --from=builder /app/package.json ./package.json
 
# Espone la porta 8080 per Cloud Run
EXPOSE 8080

# Avvia il server Next.js
# CMD ["node", "server.js"]s
# CMD ["npm", "start"] # richiede in package.json lo script {"start": "next start -p 8080"}
CMD ["node", ".next/standalone/server.js"]