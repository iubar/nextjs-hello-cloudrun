stages:
  - build
  - lint
  - quality
  - deploy
  - e2e
default:
  cache: # https://docs.gitlab.com/ee/ci/caching/ https://docs.gitlab.com/ee/ci/yaml/#cache
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules
  before_script:
    # see https://docs.gitlab.com/ee/ci/variables/
    - echo "CI_PROJECT_ID '${CI_PROJECT_ID}', CI_PROJECT_DIR = '${CI_PROJECT_DIR}', CI_COMMIT_REF_SLUG = '${CI_COMMIT_REF_SLUG}'"
    - echo "branch or tag name = '${CI_COMMIT_REF_NAME}', job = '${CI_JOB_NAME}', stage = '${CI_JOB_STAGE}', commit message = '$CI_COMMIT_MESSAGE'"
    - uname -a
    - hostname
    - whoami
    - pwd
    - echo "HOME is ${HOME}"
    - node -v
    - npm -v
.ssh-template:
  variables:
    REMOTE_HOST: "34.154.70.187"
    SSH_USER: "borgo"
    SSH_PORT: "22"
  before_script:
    - cat /etc/*-release && uname -a # https://unix.stackexchange.com/questions/23833/how-can-i-tell-what-version-of-linux-im-using
    - hostname
    - whoami
    - mkdir ~/.ssh || true
    - "PROD_PPK_OPENSSH=$(echo ${PROD_PPK_OPENSSH_BASE64} | base64 --decode)"
    - echo -e ${PROD_PPK_OPENSSH} >~/.ssh/id_ed25519_prod
    - chmod 600 ~/.ssh/id_ed25519_prod
    #
    # Problem: How to specify the default ssh private key ? Solutions:
    # a) di default il sistema utilizza la chiave più recente, quindi modifico il timestamp
    # (di quanto sopra inizio a non esserne sicuro, serve un riferimento alla doc ufficiale)
    # Ma il seguente comando NON RISOLVE - touch ~/.ssh/id_ed25519_prod
    # b) in alternativa
    # You can add a section in the file ~/.ssh/config that always uses a specific key for the host, for examnple:
    #   Host <ip>
    #    IdentityFile ~/.ssh/id_rsa
    # c) in alternativa, uso il nome di default (id_rsa o id_rsa.pub) per identificare la chiave
    - rm ~/.ssh/id_ed25519 || true
    # - ln -s ~/.ssh/id_ed25519_prod ~/.ssh/id_ed25519
    # READ : https://askubuntu.com/questions/30788/does-ssh-key-need-to-be-named-id-rsa
    - mv ~/.ssh/id_ed25519_prod ~/.ssh/id_ed25519
    # Configuring the "known_hosts" file...
    # - cp ~/.ssh/known_hosts ~/.ssh/known_hosts.old || true # il file potrebbe non esistere
    - rm ~/.ssh/known_hosts || true
    - ssh -V
    - ssh-keyscan -p ${SSH_PORT} -t ed25519 -H ${REMOTE_HOST} >> ~/.ssh/known_hosts
    - ls ~/.ssh -lah
.ssh-stage-template:
  variables:
    REMOTE_HOST: "192.168.0.201"
    SSH_USER: "stage"
    SSH_PORT: "22"
  before_script:
    - cat /etc/*-release && uname -a
    - hostname
    - whoami
    - mkdir -p ~/.ssh
    # La variabile d'ambiente è stata creata con il seguente comando
    # base64 -w 0 ~/.ssh/id_ed25519 > id_ed25519.base64
    # Nota che l'argomento -w 0 garantisce che l'output sia tutto su una singola riga (importante per GitLab).
    - echo $STAGE_PPK_OPENSSH_BASE64 | base64 --decode > ~/.ssh/id_ed25519
    # alternativa simile :
    # - echo ${STAGE_PPK_OPENSSH_BASE64} | openssl enc -base64 -d > ~/.ssh/id_ed25519_stage
    - chmod 600 ~/.ssh/id_ed25519
    - echo "Remote host ${REMOTE_HOST}"
    - ssh-keyscan -p ${SSH_PORT} -t ed25519 -H ${REMOTE_HOST} > ~/.ssh/known_hosts
    - ls ~/.ssh -lah
    - ssh -V
  allow_failure: true
build:
  stage: build
  tags:
    - expo
  script:
    - npm ci # non posso usarlo se per lo sviluppo (in locale) utilizzo pnpm e di coneguenza non ho il file package-lock.json nel repository
    #- npm install
eslint:
  stage: lint
  tags:
    - expo
  script:
    - npm run eslint:quiet
prettier:
  stage: quality
  tags:
    - expo
  script:
    - echo "Checking formatting rules..."
    - npm run --silent format:check
  allow_failure: true
outdated:
  stage: quality
  tags:
    - expo
  script:
    - echo 'Checking updates...'
    - npm run outdate
  only:
    - main
stage-on-efesto:
  extends: .ssh-stage-template
  stage: deploy
  tags:
    - expo
  variables:
    SFTP_REMOTE_PATH: /var/www/pagheopen-sandbox
    LOCAL_PATH: ./dist/client
  script:
    # Prima di calcolare il fingerprint devo estrarre la chiave pubblica...
    - ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub
    # Caloclo il fingerprint...
    - ssh-keygen -l -f ~/.ssh/id_ed25519.pub
    # Eegui il comando "hostname" sull'host remoto
    - ssh -i ~/.ssh/id_ed25519 -T ${SSH_USER}@${REMOTE_HOST} hostname
    # -T disabilita l'allocazione del TTY (nessun terminale interattivo)
    # Se non usi -i, SSH usa la chiave predefinita o quella indicata in ~/.ssh/config
    # Esegui uno scritp bash su host remoto:
    # - ssh -T ${SSH_USER}@${REMOTE_HOST} /opt/iubar/scripts/deploy.sh https://gitlab.iubar.it/iubar/pagheopen-site-astro.git /opt/iubar/pagheopen-site-astro
    - echo 'TODO....'
  when: manual
  allow_failure: true
  only:
    - main
deploy-on-docker:
  extends: .ssh-template
  stage: deploy
  tags:
    - expo
  script:
    #- ssh -T ${SSH_USER}@${REMOTE_HOST} hostname
    #- ssh -T ${SSH_USER}@${REMOTE_HOST} /opt/iubar/scripts/deploy.sh https://gitlab.iubar.it/iubar/iubar-nextjs-hello.git /opt/iubar/iubar-nextjs-hello
    - echo 'TODO....'
  when: manual
  allow_failure: true
  only:
    - main
e2e:
  stage: e2e
  tags:
    - expo
  script:
    - echo 'TODO....'
